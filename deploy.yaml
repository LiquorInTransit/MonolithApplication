#  Provisions a new uaa-service
#  WOW, tha's pretty neat!

- hosts: localhost
  gather_facts: no
  vars: 
     region: us-east-2
     keypair_name: lit-backend-keypair
     instance_type: t2.micro
     image_name: ami-e091bc85
     live_ip_address: 18.221.100.47
  
  tasks:
    - name: Setup Global Vars
      set_fact:
        region: "{{ region }}"
        live_ip_address: "{{ live_ip_address }}"
        
    - name: Setup security group
      ec2_group:
        name: http-gateway-server
        description: Security rules for HTTP Server
        region: "{{ region }}"
        rules_egress:
           - proto: tcp
             ports: 0-65535
             cidr_ip: 0.0.0.0/0
        rules:
           - proto: tcp
             ports: 8080
             cidr_ip: 172.31.0.0/16
           
           - proto: tcp
             ports:
               - 80
               - 22
             cidr_ip: 0.0.0.0/0

    - name: Provision an instance
      ec2:
        key_name: "{{ keypair_name }}"
        group: http-gateway-server
        instance_type: "{{ instance_type }}"
        image: "{{ image_name }}"
        wait: true
        region: "{{region}}"
        exact_count: 1 
        count_tag:
          Name: uaa-service
          Deploy: New
        instance_tags:
          Name: uaa-service
          Deploy: Blue
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: "{{ec2.instances}}"

    - name: Wait for SSH Server to start responding
      wait_for:
              port: 22
              host: "{{item.public_ip}}"
              state: started
      with_items: "{{ec2.instances}}"

- hosts: tag_Deploy_Blue, ec2hosts
  sudo: yes
  vars_files:
    - NGINXConfig/nginx_vars.yml
  tasks:
#  - name: upgrade all packages
#    yum: name=* state=latest
#    become: true
  
#  - name: Install JDK
#    yum:
#       name: java-1.8.0-openjdk-devel
#       state: latest
#    become: true

#  - name: Use Java8 for Runtime Java
#    alternatives:
#       name: java
#       path: /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
#       link: /usr/bin/java
#    become: true
  - name: Install sysstat
    yum:
      name: sysstat
      state: latest
    become: true
  - name: Start sysstat
    service:
      name: sysstat
      state: started
      enabled: yes
    become: true

  - name: Send the deployment across to the new instance
    copy: 
       src: target/AuthenticationService-0.0.1-SNAPSHOT.jar
       dest: /home/ec2-user/app/target/
       mode: 0700
       
  - name: Send the .conf file accross to the new instance
    copy:
      src: AuthenticationService-0.0.1-SNAPSHOT.conf
      dest: /home/ec2-user/app/target
      mode: 0700

  - name: Build a link to the executable so it becomes a service
    file:
            src: /home/ec2-user/app/target/AuthenticationService-0.0.1-SNAPSHOT.jar
            dest: /etc/init.d/microservice
            state: link
    become: true

  - name: Install microservice as a startup service
    service:
            name: microservice
            state: started
            enabled: yes
    become: true

  - name: Wait for the new webserver to begin responding
    wait_for:
            host: localhost
            port: 8080
            state: started
            
#Once the server is responding, install nGinx and configure proxy
  - name: Add the Nginx Repository
    yum:
       name: epel-release
       state: latest
    become: true
  - name: Install Nginx
    yum:
       name: nginx
       state: latest
    become: true
  - name: Create sites-available folder
    file:
      path: /etc/nginx/sites-available
      state: directory
    become: true
  - name: Create sites-enabled folder
    file:
      path: /etc/nginx/sites-enabled
      state: directory
    become: true
  - name: Replace NGinx config with local config file
    copy:
      src: NGINXConfig/nginx.conf
      dest: /etc/nginx/
      mode: 0700
    become: true    
  - name: copy template
    template:
      src: NGINXConfig/service.conf.j2
      dest: /etc/nginx/sites-available/{{service}}
      mode: 0700
    become: true
  - name: make site available
    file: 
      src: /etc/nginx/sites-available/{{ service }} 
      dest: /etc/nginx/sites-enabled/default
      state: link
  - name: restart nginx
    service: 
      name: nginx
      state: restarted
            
# Series of steps to implement a Green -> Blue switchover

- hosts: localhost
  tasks:
  - name: Gather facts about the new blue server
    ec2_remote_facts:
       filters:
          "tag:Deploy": Blue
          "tag:Name": uaa-service
          instance-state-name: running
       region: "{{ region }}"
    register: new_server

  - name: Get the id of the old, soon to be dead, green server
    ec2_remote_facts:
       filters:
          "tag:Deploy": Green
          "tag:Name": uaa-service
          instance-state-name: running
       region: "{{ region }}"
    register: old_green

  - name: Deallocate the EIP
    ec2_eip:
       device_id: "{{ old_green.instances[0].id }}"
       ip: "{{ live_ip_address }}"
       state: absent
       region: "{{ region }}"
    when: 
      - old_green.instances[0] is defined
      - old_green.instances[0].id is defined

  - name: Allocate the EIP to the new instance
    ec2_eip:
      device_id: "{{ new_server.instances[0].id }}"
      ip: "{{ live_ip_address }}"
      region: "{{ region }}"
      
  - name: Call shutdown endpoint of old green server
    uri:
      url: http://{{old_green.instances[0].private_ip_address}}:8080/mgmt/shutdown
      user: admin
      password: admin
      force_basic_auth: yes
      method: POST
    ignore_errors: yes

  - name: Terminate the existing Green Server.
    ec2:
      exact_count: 0
      count_tag:
        Deploy: Green
        Name: uaa-service
      region: "{{ region }}"
      image: notneeded

  - name: All done, set new server to Green status
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instances[0].id }}"
       tags:
          Deploy: Green
       state: present

  - name: Remove Blue Tag
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instances[0].id }}"
       tags:
          Deploy: Blue
       state: absent
